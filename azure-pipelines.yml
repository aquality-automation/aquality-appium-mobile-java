trigger:
  - master

pool:
  vmImage: 'macOS-latest'

jobs:
- job: sonar
  displayName: Analyse code with SonarQube

  steps:
    - task: SonarCloudPrepare@1
      displayName: 'Prepare SonarCloud analysis'
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'aqualityautomation'
        scannerMode: 'CLI'
        configMode: 'file'
        extraProperties: |
            sonar.coverage.exclusions=**/**

    - task: Maven@3
      displayName: 'Compile project'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean compile'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '11'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
      continueOnError: true

    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud code analysis'
      continueOnError: true

    - task: SonarCloudPublish@1
      displayName: 'Publish SonarCloud quality gate results'

- job: tests
  displayName: Run tests
  strategy:
    maxParallel: 2
    matrix:
      REMOTE_SERVER:
        isRemote: true
      LOCAL_SERVER:
        isRemote: false

  variables:
    ANDROID_EMU_NAME: test
    ANDROID_SDK_ID: system-images;android-28;google_apis_playstore;x86

  steps:
    - task: CmdLine@2
      displayName: 'Configure Appium and Android SDK'
      inputs:
        script: |
          echo "Configuring Environment"
          export PATH=$PATH:$JAVA_HOME/bin
          echo export "ANDROID_HOME=\$ANDROID_HOME" >> ~/.bash_profile
          export PATH=$PATH:$ANDROID_HOME

          echo "ANDROID_HOME: ${ANDROID_HOME}"
          echo "JAVA_HOME: ${JAVA_HOME}"
          echo "PATH: ${PATH}"

          echo "y" | $ANDROID_HOME/tools/bin/sdkmanager "$(ANDROID_SDK_ID)"
          echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n "$(ANDROID_EMU_NAME)" -k "$(ANDROID_SDK_ID)" -f
          $ANDROID_HOME/emulator/emulator -list-avds

          echo "Starting emulator"
          nohup $ANDROID_HOME/emulator/emulator -avd "$(ANDROID_EMU_NAME)" -gpu swiftshader_indirect -noaudio -no-boot-anim -no-snapshot > /dev/null 2>&1 &
          $ANDROID_HOME/platform-tools/adb wait-for-device
          while [[ $? -ne 0 ]]; do sleep 1; $ANDROID_HOME/platform-tools/adb shell pm list packages; done;
          $ANDROID_HOME/platform-tools/adb devices
          echo "Emulator started"

          echo "Installing Appium"
          npm install -g appium@next
          ln -fs /usr/local/lib/node_modules/appium/build/lib/main.js /usr/local/bin/appium
          chmod +x /usr/local/bin/appium
          export PATH=$PATH:/usr/local/bin/appium
          appium --version
          echo "Appium installed"

          echo "Installing UIA2 driver"
          appium driver install uiautomator2
          appium driver list
          echo "UIA2 driver installed"

          echo "Installing and Running Appium doctor"
          npm install -g request@2.34.0
          npm install @appium/doctor -g
          ln -fs /usr/local/lib/node_modules/appium-doctor/appium-doctor.js /usr/local/bin/appium-doctor
          chmod +x /usr/local/bin/appium-doctor
          export PATH=$PATH:/usr/local/bin/appium-doctor
          appium-doctor
          echo "Appium doctor installed and executed"

          #sudo xcode-select -s /Applications/Xcode_$(XCODE_VERSION).app/Contents/Developer
          #xcrun simctl list

    - task: CmdLine@2
      displayName: 'Start Appium server'
      inputs:
        script: |
          appium --allow-insecure chromedriver_autodownload --base-path /wd/hub &
          echo "Appium server started"
      condition: eq(variables['isRemote'], 'true')

    - task: Maven@3
      displayName: 'Run tests'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'test -DisRemote=$(isRemote)'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '11'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false

    - task: CopyFiles@2
      displayName: 'Copy failure screenshots and test logs'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/target'
        Contents: |
            surefire-reports/failure_screenshots/*.png
            log/*.log
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      displayName: 'Publish copied artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      condition: succeededOrFailed()
